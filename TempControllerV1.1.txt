#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>
#include <SoftwareSerial.h>
#include <String.h>
#include <OneWire.h>


SoftwareSerial SerialAT(7, 8);

int DS18S20_Pin = 2; 
OneWire ds(DS18S20_Pin);
float temperature;

int z;


const char apn[]  = "internet.sierrawireless.com";
const char user[] = "";
const char pass[] = "";


TinyGsm modem(SerialAT);
TinyGsmClient client(modem);

const char server[] = "api.thingspeak.com";
const char resource[] = "/update?api_key=XXXXXXX&field1=0";

const int port = 80;

void setup() {

  Serial.begin(9600);
  delay(10);

  SerialAT.begin(9600);
  delay(3000);

  Serial.println(F("Initializing modem..."));
  modem.restart();

  String modemInfo = modem.getModemInfo();
  Serial.print("Modem: ");
  Serial.println(modemInfo);

}

void loop() {

  temperature = getTemp();
      delay(2); 
Serial.print("Sıcaklık: " );
Serial.println(temperature);

  Serial.print(F("Waiting for network..."));
  if (!modem.waitForNetwork()) {
    Serial.println(" fail");
    modem.restart();
    delay(10000);
    return;
  }
  Serial.println(" OK");

  Serial.print(F("Connecting to "));
  Serial.print(apn);
  if (!modem.gprsConnect(apn, user, pass)) {
    Serial.println(" fail");
    delay(10000);
    return;
  }
  Serial.println(" OK");

  Serial.print(F("Connecting to "));
  Serial.print(server);
  if (!client.connect(server, port)) {
    Serial.println(" fail");
    delay(10000);
    return;
  }
  Serial.println(" OK");

  
  client.print(String("GET ") + resource + temperature +"\r\n" );
  client.print(String("Host: ") + server + "\r\n");
  client.print("Connection: close\r\n\r\n");
  
  Serial.println();

  client.stop();
  Serial.println("Server disconnected");

  modem.gprsDisconnect();
  Serial.println("GPRS disconnected");
  delay(300000);


}


float getTemp(){
  

  byte data[12];
  byte addr[8];

  if ( !ds.search(addr)) {
      
      ds.reset_search();
      return -1000;
  }

  if ( OneWire::crc8( addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return -1000;
  }

  if ( addr[0] != 0x10 && addr[0] != 0x28) {
      Serial.print("Device is not recognized");
      return -1000;
  }

  ds.reset();
  ds.select(addr);
  ds.write(0x44,1); 

  byte present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE); 

  for (int i = 0; i < 9; i++) { 
    data[i] = ds.read();
  }

  ds.reset_search();

  byte MSB = data[1];
  byte LSB = data[0];

  float tempRead = ((MSB << 8) | LSB); 
  float TemperatureSum = tempRead / 16;

  return TemperatureSum;

}


